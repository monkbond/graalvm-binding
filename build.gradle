import org.apache.tools.ant.taskdefs.condition.Os
buildscript {
  configurations.all {
    resolutionStrategy.dependencySubstitution {
      substitute module('com.jcraft:jsch') using module('com.github.mwiede:jsch:0.2.13')
    }
  }
}


plugins {
  id 'java-library'
  id 'maven-publish'
  id 'jacoco'
  id 'com.github.spotbugs' version '6.0.4'
  id 'org.owasp.dependencycheck' version '8.4.3'
  id "org.gradle.test-retry" version "1.5.8"
  id "io.freefair.lombok" version "8.3"
  id 'org.barfuin.gradle.taskinfo' version '2.1.0'
  id 'org.barfuin.gradle.jacocolog' version '3.1.0'
  id 'nebula.optional-base' version '7.0.0'
  id 'org.cyclonedx.bom' version '1.7.4'
  id 'pl.allegro.tech.build.axion-release' version '1.15.5'
}

ext {
  interlokSnapshotMetadata = "https://nexus.adaptris.net/nexus/content/repositories/snapshots/com/adaptris/interlok-core/maven-metadata.xml"
  interlokReleaseMetadata = "https://nexus.adaptris.net/nexus/content/repositories/releases/com/adaptris/interlok-core/maven-metadata.xml"
  interlokVersioning = [
    latestRelease: { ->
      def mavenMetadata=new XmlSlurper().parse(interlokReleaseMetadata)
      return mavenMetadata.versioning.latest.text()
    },
    latestSnapshot: {->
      def mavenMetadata=new XmlSlurper().parse(interlokSnapshotMetadata)
      return mavenMetadata.versioning.latest.text()
    }
  ]
  javaProvider= [
    vendor: { ->
      return System.getProperty("java.vendor")
    },

    isGraalVM: { ->
      return javaProvider.vendor().toLowerCase().contains("graalvm")
    }
  ]

  defaultReleaseVersion = project.findProperty('defaultReleaseVersion') ?: interlokVersioning.latestSnapshot()
  interlokArtifactRepo = project.findProperty('interlokArtifactRepo') ?: 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.findProperty('mavenPublishUrl') ?: 'https://maven.pkg.github.com/monkbond/graalvm-binding'
  mavenPublishUsername= project.findProperty('mavenPublishUsername') ?: System.getenv("GITHUB_ACTOR")
  mavenPublishPassword= project.findProperty('mavenPublishPassword') ?: System.getenv("GITHUB_TOKEN")

  jitpackVersionOverride= project.findProperty('version') ?: defaultReleaseVersion
  javadocsBaseUrl = interlokArtifactRepo + "/content/sites/javadocs/com/adaptris"
  defaultNexusRepo = project.findProperty('defaultNexusRepo') ?: 'unknown'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  delombokTargetDir = new File("${project.projectDir}/src/main/generated")

  componentName='Interlok Scripting/GraalVM'
  componentDesc="Polyglot scripting support via GraalVM"

  organizationName = "com.github.monkbond"
  organizationUrl = "https://monkbond.github.io"
  slf4jVersion="2.0.9"
  junitJupiterVersion = '5.10.1'
  mockitoVersion = '5.2.0'
  graalvmVersion = "22.3.4"
  // scmVersion.version is resolved when attempting to resolve dependencies, which
  // means it still has all the defaults, so it's either do it now or
  // gradle -Prelease.versionIncrement=incrementMinor XXX
  // gradle markNextVersion -Prelease.version=4.6.0
  // If we 'gradle release' before 4.6-SNAPSHOT is available then
  // we break ourselves.
  scmVersion.versionIncrementer 'incrementMinor'
  scmVersion.tag.prefix=""
  scmVersion.sanitizeVersion = true
  scmVersion.ignoreUncommittedChanges = false
}

// jitpack executes with -Pgroup= -Pversion=
ext.jitpackContext = [

  is_jitpack: { ->
    return System.getenv().containsKey("JITPACK");
  },

  version: { ->
    return jitpackVersionOverride
  },

  buildInfo: { ->
    return new Date().format('HH:mm:ss z');
  },

  buildVersion: { ->
    def gitHash= System.getenv("GIT_DESCRIBE")
    def gitBranch=System.getenv("GIT_BRANCH")
    // If it contains the hash, then it's probably -Pversion=develop-9898b555e6-1
    // Otherwise it'll be a release -Pversion=4.5.0, in which
    // case the date is fine.
    if (jitpackVersionOverride.contains(gitHash)) {
      return gitBranch + "-snapshot"
    }
    return jitpackVersionOverride
  }

]


ext.buildDetails = [
  hostname: { ->
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      return System.getenv("COMPUTERNAME")
    }
    return System.getenv("HOSTNAME")
  },

  gitBranchNameOrTimestamp: { branchName ->
    if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
      return new Date().format('HH:mm:ss z');
    }
    return branchName;
  },


  buildInfo: { ->
    if (!jitpackContext.is_jitpack()) {
    new ByteArrayOutputStream().withStream { os ->
        exec {
          executable = "git"
          args = ["rev-parse", "--abbrev-ref", "HEAD"]
          standardOutput = os
        }
        def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
        return buildDetails.gitBranchNameOrTimestamp(branchName);
      }
    } else {
      return jitpackContext.buildInfo()
    }
  },


  // If graphviz is installed via scoop, plantuml doesn't find it because it's not
  // in its expected "location(s)" it searches for c:\*\graphviz**\dot.exe
  // so windows we'd expect to have the GRAPHVIZ_DOT env defined
  // On Linux we should be able to find it via the path.
  hasGraphViz: { ->
    def app = "dot"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      app = app + ".exe"
    }
    return System.getenv("GRAPHVIZ_DOT") !=null ||  System.getenv("PATH").split(File.pathSeparator).any{
      java.nio.file.Paths.get("${it}").resolve(app).toFile().exists()
    }
  },

  propertyTemplate: { dir, filename ->
    def file = new File(dir, filename + "." + buildDetails.hostname())
    if (file.exists()) {
      return file.getName()
    }
    return filename
  },

  testResourcesDir: { ->
    return "${project.projectDir}/src/test/resources".replaceAll("\\\\", "/")
  },

  is_ci_pipeline: { ->
    return System.getenv().containsKey("CI");
  },

  version: { ->
    if (jitpackContext.is_jitpack()) {
      return jitpackContext.version()
    }
    return scmVersion.version
  },

  buildVersion: { ->
    if (jitpackContext.is_jitpack()) {
      return jitpackContext.buildVersion()
    }
    return scmVersion.version
  }

]

ext.interlokDependency = [
  interlokCoreVersion: { ->
    def v = scmVersion.version
    def derivedInterlokVersion = scmVersion.version
    if (v ==~ '([0-9]+\\.)([0-9]+)\\.[0-9]+-SNAPSHOT') {
      // gvm-4.5.0-SNAPSHOT -> interlok-4.5-SNAPSHOT
      derivedInterlokVersion =  v.replaceAll('([0-9]+\\.)([0-9]+)\\.[0-9]+-SNAPSHOT', '$1$2-SNAPSHOT')
    } else {
      // it must be an actual release
      // gvm-4.5.0 -> 4.5.0-RELEASE
      // gvm-4.5.1 -> 4.5.0-RELEASE (since dependency management should sort us out)
      derivedInterlokVersion =  v.replaceAll('([0-9]+\\.)([0-9]+)\\.[0-9]+', '$1$2.0-RELEASE')
    }
    // This copes with the situation where someone has asked for 'develop-SNAPSHOT'
    // but the commitRef is at the same location as the gitTag. In that situation
    // axion will call it "4.5.0", which means we'll ask for 4.5.0-RELEASE.
    // We just force it to be 4.5-SNAPSHOT so that we are explicit
    if (jitpackContext.is_jitpack()) {
      if (jitpackContext.buildVersion().endsWith("snapshot")) {
        derivedInterlokVersion =  v.replaceAll('([0-9]+\\.)([0-9]+).*', '$1$2-SNAPSHOT')
      }
    }
    return project.findProperty('interlokCoreVersion') ?: derivedInterlokVersion
  },
  interlokJavadocsUrl: { ->
    return javadocsBaseUrl + "/interlok-core/" + interlokDependency.interlokCoreVersion()
  },
  interlokJavadocsOffline: { ->
    return offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-" +  interlokDependency.interlokCoreVersion() + "-javadoc.jar"
  },
  interlokCommonJavadocsUrl: { ->
    return javadocsBaseUrl + "/interlok-common/" + interlokDependency.interlokCoreVersion()
  },
  interlokCommonJavadocsOffline: { ->
    return offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-" +  interlokDependency.interlokCoreVersion() + "-javadoc.jar"
  }
]

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group = organizationName
version = buildDetails.version()

lombok.disableConfig = true

allprojects {
  tasks.withType(Jar) {
    metaInf {
      from ("$rootDir") {
        include 'LICENSE*'
        include 'NOTICE*'
      }
    }
  }
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }
}

repositories {
  mavenCentral() {
    content {
      excludeGroupByRegex "com\\.adaptris.*"
    }
  }
  if (defaultNexusRepo != "unknown") {
    maven {
      url "$defaultNexusRepo"
      allowInsecureProtocol true
    }
  }
  maven {
    url "$interlokArtifactRepo/content/groups/interlok"
    content {
      includeGroupByRegex "com\\.adaptris.*"
    }
  }
  maven { url "$interlokArtifactRepo/content/groups/public" }
  maven { url "https://jitpack.io" }
}


configurations {
  javadoc {}
  umlDoclet {}
  offlineJavadocPackages {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'stax', module: 'stax-api'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  // INTERLOK-3197 exclude old javax.mail
  all*.exclude group: 'com.sun.mail', module: 'javax.mail'
  all*.exclude group: 'javax.validation', module: 'validation-api'
  all*.exclude group: 'javax.activation', module: 'activation'
  all*.exclude group: 'javax.activation', module: 'javax.activation-api'


  // INTERLOK-3740 switch from jcraft to com.github.mwiede jsch fork.
  all*.exclude group: 'com.jcraft', module: 'jsch'

}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
  resolutionStrategy.dependencySubstitution {
    substitute module('com.jcraft:jsch') using module('com.github.mwiede:jsch:0.2.13')
  }
}

dependencies {
  // Long form to avoid $variable use.
  api group: "com.adaptris", name: "interlok-core", version: interlokDependency.interlokCoreVersion(), changing: true
  api group: "com.adaptris", name: "interlok-common", version: interlokDependency.interlokCoreVersion(), changing: true
  implementation ("org.slf4j:slf4j-api:$slf4jVersion")
  annotationProcessor group: "com.adaptris", name: "interlok-core-apt", version: interlokDependency.interlokCoreVersion(), changing: true

  umlDoclet("nl.talsmasoftware:umldoclet:2.1.1")

  if (!javaProvider.isGraalVM()) {
    // This is enough to do polyglot javascript with graal.
    implementation "org.graalvm.sdk:graal-sdk:$graalvmVersion",  optional
    implementation "org.graalvm.js:js:$graalvmVersion",  optional
    implementation "org.graalvm.js:js-scriptengine:$graalvmVersion",  optional
  }

  testImplementation group: "com.adaptris", name: "interlok-stubs", version: interlokDependency.interlokCoreVersion(), changing: true

  testImplementation ('junit:junit:4.13.2')
  testImplementation ("org.slf4j:slf4j-simple:$slf4jVersion")
  testImplementation ("org.mockito:mockito-core:$mockitoVersion")
  testImplementation ("org.mockito:mockito-inline:$mockitoVersion")
  testImplementation ("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
  testImplementation ("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
  testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junitJupiterVersion") {
    because 'allows JUnit 3 and JUnit 4 tests to run'
  }
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
  testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.10.1") {
    because 'allows tests to run from IDEs that bundle older version of launcher'
  }

  javadoc group: "com.adaptris", name: "interlok-core-apt", version: interlokDependency.interlokCoreVersion(), changing: true
  offlineJavadocPackages group: "com.adaptris", name: "interlok-core", version: interlokDependency.interlokCoreVersion(), classifier: "javadoc", changing: true
  offlineJavadocPackages group: "com.adaptris", name: "interlok-common", version: interlokDependency.interlokCoreVersion(), classifier: "javadoc", changing: true

}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": project.group)
  }
}

def generateVersionFile = tasks.register('generateVersionFile', WriteProperties) {
  outputFile file('src/main/resources/META-INF/adaptris-version')
  property 'component.name', componentName
  property 'build.version', buildDetails.buildVersion()
  property 'groupId', project.group
  property 'artifactId', project.name
  property 'build.date', new Date().format('yyyy-MM-dd')
  property 'build.info', buildDetails.buildInfo()
}

task offlinePackageList(type: Copy) {
  description 'Build an offline package-list for javadocs'
  group 'Documentation'

  project.configurations.offlineJavadocPackages.collect { dependency ->
    from(zipTree(dependency)) {
      into dependency.name
    }
  }
  include "package-list"
  include "element-list"
  into offlineJavadocPackageDir
}

javadoc {
  onlyIf {
    !buildDetails.hasGraphViz()
  }
  configure(options) {
    options.linksOffline(interlokDependency.interlokJavadocsUrl(), interlokDependency.interlokJavadocsOffline())
    options.linksOffline(interlokDependency.interlokCommonJavadocsUrl(), interlokDependency.interlokCommonJavadocsOffline())
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addBooleanOption "-no-module-directories", true
    options.addStringOption('Xdoclint:none', '-quiet')
    title= componentName
  }
}


task umlJavadoc(type: Javadoc) {
  group 'Documentation'
  description 'Build javadocs using plantuml + graphviz + umldoclet, if dot is available'
  onlyIf {
    buildDetails.hasGraphViz()
  }
  source = sourceSets.main.extensions.delombokTask
  classpath = project.sourceSets.main.compileClasspath
  configure(options) {
    options.linksOffline(interlokDependency.interlokJavadocsUrl(), interlokDependency.interlokJavadocsOffline())
    options.linksOffline(interlokDependency.interlokCommonJavadocsUrl(), interlokDependency.interlokCommonJavadocsOffline())
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption "Xdoclint:none", "-quiet"
    options.addBooleanOption "-no-module-directories", true
    options.docletpath = configurations.umlDoclet.files.asType(List)
    options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
    // Create class & package use pages
    options.addStringOption "use"
    options.addStringOption "umlImageFormat", "SVG"
    options.addStringOption "umlExcludedTypeReferences", "java.lang.Exception,java.lang.Object,java.lang.Enum,java.lang.annotation.Annotation"
    options.addStringOption "umlJavaBeanPropertiesAsFields"
    options.addBooleanOption "failOnCyclicPackageDependencies", false
  }
}

jacocoTestReport {
  reports {
    xml.required= true
    html.required= true
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
}

test {
  if (buildDetails.is_ci_pipeline()) {
    retry {
      maxRetries = 3
      maxFailures = 20
    }
  }
  useJUnitPlatform()
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        // asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "4.5.0+")
        properties.appendNode("tags", "graalvm scripting")
        properties.appendNode("readme", "https://github.com/monkbond/graalvm-binding/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/monkbond/graalvm-binding/")
      }
    }
  }
  repositories {
    maven {
      name = "github"
      url mavenPublishUrl
      credentials {
        username = mavenPublishUsername
        password = mavenPublishPassword
      }
    }
  }
}

spotbugsMain {
  effort = "max"
  reportLevel = "high"
  reports {
    xml {
      required.set(false)
    }
    html {
      required.set(true)
      stylesheet = 'default.xsl'
    }
  }
}

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  scanConfigurations = [ "api", "compileClasspath", "runtimeClasspath" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
  }
}

task generateUnitTestProperties {
  doLast {
    def testResourcesDir = buildDetails.testResourcesDir()
    ant.property(file: project.projectDir.getCanonicalPath() + "/" + "build.properties")
    ant.property(file: testResourcesDir + "/" + buildDetails.propertyTemplate(testResourcesDir, "unit-tests.properties.template"))
    ant.echoproperties(destfile:  testResourcesDir + '/unit-tests.properties.resolved', prefix: "junit.")
    ant.replace(file:  testResourcesDir + '/unit-tests.properties.resolved', token:"junit.", value: "")
  }
}

task copyUnitTestProperties() {
  dependsOn(generateUnitTestProperties)
  doLast {
    def testResourcesDir = buildDetails.testResourcesDir()
    delete file( testResourcesDir + '/unit-tests.properties')
    ant.copy(file: testResourcesDir + "/unit-tests.properties.resolved",
            tofile: testResourcesDir + '/unit-tests.properties') {
      filterset {
        filter(token: "JAVA_HOME", value: System.getProperty("java.home").replaceAll("\\\\", "/"))
        filter(token: "BASE_DIR", value: project.projectDir.getCanonicalPath().replaceAll("\\\\", "/"))
        filter(token: "BUILD_DIR", value: project.buildDir.getCanonicalPath().replaceAll("\\\\", "/"))
      }
    }
  }
}

task deleteGeneratedFiles(type: Delete) {
  delete file(buildDetails.testResourcesDir() + "/unit-tests.properties"),
         file(buildDetails.testResourcesDir() + "/unit-tests.properties.resolved"),
         delombokTargetDir, "src/main/resources/META-INF/adaptris-version"
}

scmVersion {
  tag {
    prefix = ""
  }
  checks {
    // At the point of release, we probably still depend on 4.5-SNAPSHOT
    snapshotDependencies = false
  }
}


spotbugsTest.enabled = false
processResources.dependsOn generateVersionFile
javadoc.dependsOn offlinePackageList,umlJavadoc
check.dependsOn jacocoTestReport
clean.dependsOn deleteGeneratedFiles
processTestResources.dependsOn copyUnitTestProperties
